#!/usr/bin/env node

/**
 * Developer: BelirafoN
 * Date: 12.04.2016
 * Time: 15:44
 */

"use strict";

let argv = require('yargs').argv;
const debugLog = require('debug')('server');
const errorLog = require('debug')('server:error');
const config = require('config');
const co = require('co');
const sysConf = config.get('system');
const eventsConf = config.get('events');
const serverConf = config.get('server');
const amiUtils = require('asterisk-ami-event-utils');
let eventIndex = 0;

if(argv.help){
    console.log(`-`.repeat(35));
    console.log(`| asterisk ami development server |`.toUpperCase());
    console.log(`-`.repeat(35));
    console.log();
    console.log(`* --port - listening port, default ${serverConf.port}`);
    console.log(`* --auth-timeout - authorization timeout, default ${serverConf.options.authTimeout} ms`);
    console.log(`* --max-connections - max count of client connections, default ${serverConf.options.maxConnections}`);
    return;
}

let serverParams = Object.keys(argv).reduce((result, curr) => {
    if(~Object.keys(serverConf.options).indexOf(curr)){
        result[curr] = argv[curr];
    }
    return result;
}, {});

const server = require('../server').createServer(
    serverConf.message,
    serverConf.credentials,
    Object.assign({}, serverConf.options, serverParams)
);

co(function* (){
    let testServer = yield server.listen(argv.port || serverConf.port),
        eventProvider = new eventsConf.provider;

    eventProvider
        .on('event', event => {
            debugLog(`eventIndex ${++eventIndex}`);
            if(event.Event && sysConf.allowEvents){
                let eventName = event.Event.toString().toLowerCase().trim();
                if(!sysConf.allowEvents[eventName]){ return; }
            }
            testServer.broadcast(amiUtils.stringify(event));
        })
        .on('error', errorLog)
        .on('end', () => {
            debugLog('events ended.');
            eventProvider.destroy();
        })
        .on('close', () => debugLog('closed'));

    testServer.on('connection', connectionsCount => {
        if(sysConf.controlConnectionsCount == connectionsCount){
            testServer.removeAllListeners('connection');
            debugLog(`event provider initialization...`);
            eventProvider.init(eventsConf.options).catch(errorLog);
        }
    })

}).catch(error => {
    console.log(error);
    process.exit(1);
});